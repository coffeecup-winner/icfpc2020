/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Widget {
    _unused: [u8; 0],
}
pub type Fl_Callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void),
>;
pub type custom_handler_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type custom_draw_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn Fl_Widget_callback_with_captures(
        arg1: *mut Fl_Widget,
        cb: Fl_Callback,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Widget_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Widget;
}
extern "C" {
    pub fn Fl_Widget_x(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_y(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_width(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_height(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_label(arg1: *mut Fl_Widget) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Widget_set_label(arg1: *mut Fl_Widget, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Widget_redraw(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_show(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_hide(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_activate(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_deactivate(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_redraw_label(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_resize(
        arg1: *mut Fl_Widget,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Widget_tooltip(arg1: *mut Fl_Widget) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Widget_set_tooltip(arg1: *mut Fl_Widget, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Widget_get_type(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_type(arg1: *mut Fl_Widget, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_color(arg1: *mut Fl_Widget) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_color(arg1: *mut Fl_Widget, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Widget_label_color(arg1: *mut Fl_Widget) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_label_color(arg1: *mut Fl_Widget, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Widget_label_font(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_font(arg1: *mut Fl_Widget, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_label_size(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_size(arg1: *mut Fl_Widget, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_label_type(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_label_type(arg1: *mut Fl_Widget, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_box(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_box(arg1: *mut Fl_Widget, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_changed(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_changed(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_clear_changed(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_align(arg1: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_align(arg1: *mut Fl_Widget, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_delete(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_set_image(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Widget_set_handler(
        self_: *mut Fl_Widget,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Widget_set_draw(
        self_: *mut Fl_Widget,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Widget_set_trigger(arg1: *mut Fl_Widget, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_image(arg1: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_parent(self_: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_selection_color(arg1: *mut Fl_Widget) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_selection_color(arg1: *mut Fl_Widget, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Widget_do_callback(arg1: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_inside(
        self_: *const Fl_Widget,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_window(arg1: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_top_window(arg1: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_takes_events(arg1: *const Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_user_data(arg1: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_take_focus(self_: *mut Fl_Widget) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Widget_set_visible_focus(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_clear_visible_focus(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_visible_focus(self_: *mut Fl_Widget, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Widget_has_visible_focus(self_: *mut Fl_Widget) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Widget_set_user_data(arg1: *mut Fl_Widget, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Widget_draw_data(self_: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_handle_data(self_: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_set_draw_data(self_: *mut Fl_Widget, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Widget_set_handle_data(self_: *mut Fl_Widget, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Widget_damage(self_: *const Fl_Widget) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Widget_set_damage(self_: *mut Fl_Widget, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Widget_clear_damage(self_: *mut Fl_Widget);
}
extern "C" {
    pub fn Fl_Widget_as_window(self_: *mut Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_as_group(self_: *mut Fl_Widget) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Widget_set_deimage(arg1: *mut Fl_Widget, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Widget_deimage(arg1: *const Fl_Widget) -> *mut ::std::os::raw::c_void;
}
pub type Fl_Text_Modify_Cb = ::std::option::Option<
    unsafe extern "C" fn(
        pos: ::std::os::raw::c_int,
        nInserted: ::std::os::raw::c_int,
        nDeleted: ::std::os::raw::c_int,
        nRestyled: ::std::os::raw::c_int,
        deletedText: *const ::std::os::raw::c_char,
        cbArg: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Text_Buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Text_Buffer_new() -> *mut Fl_Text_Buffer;
}
extern "C" {
    pub fn Fl_Text_Buffer_delete(arg1: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Buffer_text(self_: *mut Fl_Text_Buffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Buffer_set_text(self_: *mut Fl_Text_Buffer, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Text_Buffer_append(self_: *mut Fl_Text_Buffer, txt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Text_Buffer_remove(
        self_: *mut Fl_Text_Buffer,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_length(self_: *const Fl_Text_Buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_text_range(
        self_: *const Fl_Text_Buffer,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Buffer_insert(
        self_: *mut Fl_Text_Buffer,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_replace(
        self_: *mut Fl_Text_Buffer,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_copy(
        self_: *mut Fl_Text_Buffer,
        fromBuf: *mut Fl_Text_Buffer,
        fromStart: ::std::os::raw::c_int,
        fromEnd: ::std::os::raw::c_int,
        toPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_undo(
        self_: *mut Fl_Text_Buffer,
        cp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_canUndo(self_: *mut Fl_Text_Buffer, flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Text_Buffer_loadfile(
        self_: *mut Fl_Text_Buffer,
        file: *const ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_tab_distance(self_: *const Fl_Text_Buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_set_tab_distance(
        self_: *mut Fl_Text_Buffer,
        tabDist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_select(
        self_: *mut Fl_Text_Buffer,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_selected(self_: *const Fl_Text_Buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_unselect(self_: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Buffer_selection_position(
        self_: *mut Fl_Text_Buffer,
        start: *mut ::std::os::raw::c_int,
        end: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_selection_text(self_: *mut Fl_Text_Buffer)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Buffer_remove_selection(self_: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Buffer_replace_selection(
        self_: *mut Fl_Text_Buffer,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_highlight(
        self_: *mut Fl_Text_Buffer,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_is_highlighted(self_: *mut Fl_Text_Buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_unhighlight(self_: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Buffer_highlight_position(
        self_: *mut Fl_Text_Buffer,
        start: *mut ::std::os::raw::c_int,
        end: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_highlight_text(self_: *mut Fl_Text_Buffer)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Buffer_line_text(
        self_: *const Fl_Text_Buffer,
        pos: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Buffer_line_start(
        self_: *const Fl_Text_Buffer,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_word_start(
        self_: *const Fl_Text_Buffer,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_word_end(
        self_: *const Fl_Text_Buffer,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_count_lines(
        self_: *const Fl_Text_Buffer,
        startPos: ::std::os::raw::c_int,
        endPos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Buffer_add_modify_callback(
        self_: *mut Fl_Text_Buffer,
        bufModifiedCB: Fl_Text_Modify_Cb,
        cbArg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_remove_modify_callback(
        self_: *mut Fl_Text_Buffer,
        bufModifiedCB: Fl_Text_Modify_Cb,
        cbArg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Buffer_call_modify_callbacks(self_: *mut Fl_Text_Buffer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Text_Display {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Text_Display_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Text_Display;
}
extern "C" {
    pub fn Fl_Text_Display_x(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_y(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_width(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_height(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_label(arg1: *mut Fl_Text_Display) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Display_set_label(
        arg1: *mut Fl_Text_Display,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Display_redraw(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_show(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_hide(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_activate(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_deactivate(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_redraw_label(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_resize(
        arg1: *mut Fl_Text_Display,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_tooltip(arg1: *mut Fl_Text_Display) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Display_set_tooltip(
        arg1: *mut Fl_Text_Display,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Display_get_type(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_type(arg1: *mut Fl_Text_Display, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_color(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_color(arg1: *mut Fl_Text_Display, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Text_Display_label_color(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_label_color(
        arg1: *mut Fl_Text_Display,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Display_label_font(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_label_font(arg1: *mut Fl_Text_Display, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_label_size(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_label_size(arg1: *mut Fl_Text_Display, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_label_type(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_label_type(arg1: *mut Fl_Text_Display, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_box(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_box(arg1: *mut Fl_Text_Display, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_changed(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_changed(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_clear_changed(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_align(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_align(arg1: *mut Fl_Text_Display, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_delete(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_set_image(arg1: *mut Fl_Text_Display, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Text_Display_set_handler(
        self_: *mut Fl_Text_Display,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_draw(
        self_: *mut Fl_Text_Display,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_trigger(arg1: *mut Fl_Text_Display, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_image(arg1: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_parent(self_: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_selection_color(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_selection_color(
        arg1: *mut Fl_Text_Display,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Display_do_callback(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_inside(
        self_: *const Fl_Text_Display,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_window(arg1: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_top_window(arg1: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_takes_events(arg1: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_user_data(arg1: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_take_focus(self_: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_visible_focus(self_: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_clear_visible_focus(self_: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_visible_focus(self_: *mut Fl_Text_Display, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_has_visible_focus(self_: *mut Fl_Text_Display)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_user_data(
        arg1: *mut Fl_Text_Display,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_draw_data(self_: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_handle_data(
        self_: *const Fl_Text_Display,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_set_draw_data(
        self_: *mut Fl_Text_Display,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_handle_data(
        self_: *mut Fl_Text_Display,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_damage(self_: *const Fl_Text_Display) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Text_Display_set_damage(self_: *mut Fl_Text_Display, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Text_Display_clear_damage(self_: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_as_window(self_: *mut Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_as_group(self_: *mut Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_set_deimage(
        arg1: *mut Fl_Text_Display,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Display_deimage(arg1: *const Fl_Text_Display) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_init(arg1: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_get_buffer(arg1: *mut Fl_Text_Display) -> *mut Fl_Text_Buffer;
}
extern "C" {
    pub fn Fl_Text_Display_set_buffer(arg1: *mut Fl_Text_Display, arg2: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Display_text_font(arg1: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_text_font(arg1: *mut Fl_Text_Display, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_text_size(arg1: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_text_size(arg1: *mut Fl_Text_Display, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_text_color(arg1: *const Fl_Text_Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_text_color(arg1: *mut Fl_Text_Display, n: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Text_Display_scroll(
        arg1: *mut Fl_Text_Display,
        topLineNum: ::std::os::raw::c_int,
        horizOffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_insert(arg1: *mut Fl_Text_Display, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Text_Display_set_insert_position(
        arg1: *mut Fl_Text_Display,
        newPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_insert_position(arg1: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_position_to_xy(
        self_: *const Fl_Text_Display,
        pos: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_count_lines(
        arg1: *const Fl_Text_Display,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        start_pos_is_line_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_move_right(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_move_left(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_move_up(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_move_down(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_show_cursor(arg1: *mut Fl_Text_Display, boolean: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Display_set_style_table_entry(
        self_: *mut Fl_Text_Display,
        sbuf: *mut ::std::os::raw::c_void,
        color: *mut ::std::os::raw::c_uint,
        font: *mut ::std::os::raw::c_int,
        fontsz: *mut ::std::os::raw::c_int,
        sz: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Display_set_cursor_style(
        arg1: *mut Fl_Text_Display,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_cursor_color(
        arg1: *mut Fl_Text_Display,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_scrollbar_width(
        arg1: *mut Fl_Text_Display,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_scrollbar_size(
        arg1: *mut Fl_Text_Display,
        newSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_set_scrollbar_align(
        arg1: *mut Fl_Text_Display,
        align: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_cursor_style(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_cursor_color(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_scrollbar_width(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_scrollbar_size(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_scrollbar_align(arg1: *mut Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_line_start(
        self_: *const Fl_Text_Display,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_line_end(
        self_: *const Fl_Text_Display,
        startPos: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_skip_lines(
        self_: *mut Fl_Text_Display,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_rewind_lines(
        self_: *mut Fl_Text_Display,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_next_word(self_: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_previous_word(self_: *mut Fl_Text_Display);
}
extern "C" {
    pub fn Fl_Text_Display_word_start(
        self_: *const Fl_Text_Display,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_word_end(
        self_: *const Fl_Text_Display,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_x_to_col(self_: *const Fl_Text_Display, x: f64) -> f64;
}
extern "C" {
    pub fn Fl_Text_Display_col_to_x(self_: *const Fl_Text_Display, col: f64) -> f64;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_width(
        self_: *mut Fl_Text_Display,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_width(self_: *const Fl_Text_Display)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_font(
        self_: *mut Fl_Text_Display,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_font(self_: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_size(
        self_: *mut Fl_Text_Display,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_size(self_: *const Fl_Text_Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_fgcolor(
        self_: *mut Fl_Text_Display,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_fgcolor(
        self_: *const Fl_Text_Display,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_bgcolor(
        self_: *mut Fl_Text_Display,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_bgcolor(
        self_: *const Fl_Text_Display,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Display_set_linenumber_align(
        self_: *mut Fl_Text_Display,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Display_linenumber_align(self_: *const Fl_Text_Display)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Display_in_selection(
        self_: *const Fl_Text_Display,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Text_Editor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Text_Editor_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Text_Editor;
}
extern "C" {
    pub fn Fl_Text_Editor_x(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_y(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_width(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_height(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_label(arg1: *mut Fl_Text_Editor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Editor_set_label(
        arg1: *mut Fl_Text_Editor,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_redraw(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_show(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_hide(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_activate(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_deactivate(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_redraw_label(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_resize(
        arg1: *mut Fl_Text_Editor,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_tooltip(arg1: *mut Fl_Text_Editor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Text_Editor_set_tooltip(
        arg1: *mut Fl_Text_Editor,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_get_type(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_type(arg1: *mut Fl_Text_Editor, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_color(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_color(arg1: *mut Fl_Text_Editor, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Text_Editor_label_color(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_label_color(arg1: *mut Fl_Text_Editor, color: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Text_Editor_label_font(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_label_font(arg1: *mut Fl_Text_Editor, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_label_size(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_label_size(arg1: *mut Fl_Text_Editor, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_label_type(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_label_type(arg1: *mut Fl_Text_Editor, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_box(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_box(arg1: *mut Fl_Text_Editor, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_changed(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_changed(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_clear_changed(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_align(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_align(arg1: *mut Fl_Text_Editor, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_delete(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_set_image(arg1: *mut Fl_Text_Editor, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Text_Editor_set_handler(
        self_: *mut Fl_Text_Editor,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_draw(
        self_: *mut Fl_Text_Editor,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_trigger(arg1: *mut Fl_Text_Editor, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_image(arg1: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_parent(self_: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_selection_color(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_selection_color(
        arg1: *mut Fl_Text_Editor,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_do_callback(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_inside(
        self_: *const Fl_Text_Editor,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_window(arg1: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_top_window(arg1: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_takes_events(arg1: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_user_data(arg1: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_take_focus(self_: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_visible_focus(self_: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_clear_visible_focus(self_: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_visible_focus(self_: *mut Fl_Text_Editor, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_has_visible_focus(self_: *mut Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_user_data(
        arg1: *mut Fl_Text_Editor,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_draw_data(self_: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_handle_data(self_: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_set_draw_data(
        self_: *mut Fl_Text_Editor,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_handle_data(
        self_: *mut Fl_Text_Editor,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_damage(self_: *const Fl_Text_Editor) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Text_Editor_set_damage(self_: *mut Fl_Text_Editor, flag: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn Fl_Text_Editor_clear_damage(self_: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_as_window(self_: *mut Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_as_group(self_: *mut Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_set_deimage(arg1: *mut Fl_Text_Editor, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Fl_Text_Editor_deimage(arg1: *const Fl_Text_Editor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_init(arg1: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_get_buffer(arg1: *mut Fl_Text_Editor) -> *mut Fl_Text_Buffer;
}
extern "C" {
    pub fn Fl_Text_Editor_set_buffer(arg1: *mut Fl_Text_Editor, arg2: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Text_Editor_text_font(arg1: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_text_font(arg1: *mut Fl_Text_Editor, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_text_size(arg1: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_text_size(arg1: *mut Fl_Text_Editor, s: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_text_color(arg1: *const Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_text_color(arg1: *mut Fl_Text_Editor, n: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn Fl_Text_Editor_scroll(
        arg1: *mut Fl_Text_Editor,
        topLineNum: ::std::os::raw::c_int,
        horizOffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_insert(arg1: *mut Fl_Text_Editor, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Fl_Text_Editor_set_insert_position(
        arg1: *mut Fl_Text_Editor,
        newPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_insert_position(arg1: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_position_to_xy(
        self_: *const Fl_Text_Editor,
        pos: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_count_lines(
        arg1: *const Fl_Text_Editor,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        start_pos_is_line_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_move_right(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_move_left(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_move_up(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_move_down(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_show_cursor(arg1: *mut Fl_Text_Editor, boolean: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_set_style_table_entry(
        self_: *mut Fl_Text_Editor,
        sbuf: *mut ::std::os::raw::c_void,
        color: *mut ::std::os::raw::c_uint,
        font: *mut ::std::os::raw::c_int,
        fontsz: *mut ::std::os::raw::c_int,
        sz: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Text_Editor_set_cursor_style(arg1: *mut Fl_Text_Editor, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Text_Editor_set_cursor_color(
        arg1: *mut Fl_Text_Editor,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_scrollbar_width(
        arg1: *mut Fl_Text_Editor,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_scrollbar_size(
        arg1: *mut Fl_Text_Editor,
        newSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_set_scrollbar_align(
        arg1: *mut Fl_Text_Editor,
        align: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_cursor_style(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_cursor_color(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_scrollbar_width(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_scrollbar_size(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_scrollbar_align(arg1: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_line_start(
        self_: *const Fl_Text_Editor,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_line_end(
        self_: *const Fl_Text_Editor,
        startPos: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_skip_lines(
        self_: *mut Fl_Text_Editor,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_rewind_lines(
        self_: *mut Fl_Text_Editor,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_next_word(self_: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_previous_word(self_: *mut Fl_Text_Editor);
}
extern "C" {
    pub fn Fl_Text_Editor_word_start(
        self_: *const Fl_Text_Editor,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_word_end(
        self_: *const Fl_Text_Editor,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_x_to_col(self_: *const Fl_Text_Editor, x: f64) -> f64;
}
extern "C" {
    pub fn Fl_Text_Editor_col_to_x(self_: *const Fl_Text_Editor, col: f64) -> f64;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_width(
        self_: *mut Fl_Text_Editor,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_width(self_: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_font(
        self_: *mut Fl_Text_Editor,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_font(self_: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_size(
        self_: *mut Fl_Text_Editor,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_size(self_: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_fgcolor(
        self_: *mut Fl_Text_Editor,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_fgcolor(
        self_: *const Fl_Text_Editor,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_bgcolor(
        self_: *mut Fl_Text_Editor,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_bgcolor(
        self_: *const Fl_Text_Editor,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Text_Editor_set_linenumber_align(
        self_: *mut Fl_Text_Editor,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Text_Editor_linenumber_align(self_: *const Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Text_Editor_in_selection(
        self_: *const Fl_Text_Editor,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kf_copy(e: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kf_cut(e: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kf_paste(e: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kf_undo(e: *mut Fl_Text_Editor) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fl_Simple_Terminal {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Fl_Simple_Terminal_new(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
    ) -> *mut Fl_Simple_Terminal;
}
extern "C" {
    pub fn Fl_Simple_Terminal_x(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_y(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_width(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_height(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_label(arg1: *mut Fl_Simple_Terminal)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_label(
        arg1: *mut Fl_Simple_Terminal,
        title: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_redraw(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_show(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_hide(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_activate(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_deactivate(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_redraw_label(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_resize(
        arg1: *mut Fl_Simple_Terminal,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_tooltip(
        arg1: *mut Fl_Simple_Terminal,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_tooltip(
        arg1: *mut Fl_Simple_Terminal,
        txt: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_get_type(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_type(arg1: *mut Fl_Simple_Terminal, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Simple_Terminal_color(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_color(
        arg1: *mut Fl_Simple_Terminal,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_label_color(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_label_color(
        arg1: *mut Fl_Simple_Terminal,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_label_font(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_label_font(
        arg1: *mut Fl_Simple_Terminal,
        font: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_label_size(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_label_size(
        arg1: *mut Fl_Simple_Terminal,
        sz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_label_type(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_label_type(
        arg1: *mut Fl_Simple_Terminal,
        typ: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_box(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_box(arg1: *mut Fl_Simple_Terminal, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Simple_Terminal_changed(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_changed(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_clear_changed(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_align(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_align(arg1: *mut Fl_Simple_Terminal, typ: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Simple_Terminal_delete(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_image(
        arg1: *mut Fl_Simple_Terminal,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_handler(
        self_: *mut Fl_Simple_Terminal,
        cb: custom_handler_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_draw(
        self_: *mut Fl_Simple_Terminal,
        cb: custom_draw_callback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_trigger(
        arg1: *mut Fl_Simple_Terminal,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_image(arg1: *const Fl_Simple_Terminal)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_parent(
        self_: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_selection_color(
        arg1: *mut Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_selection_color(
        arg1: *mut Fl_Simple_Terminal,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_do_callback(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_inside(
        self_: *const Fl_Simple_Terminal,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_window(
        arg1: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_top_window(
        arg1: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_takes_events(
        arg1: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_user_data(
        arg1: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_take_focus(self_: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_visible_focus(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_clear_visible_focus(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_visible_focus(
        self_: *mut Fl_Simple_Terminal,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_has_visible_focus(
        self_: *mut Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_user_data(
        arg1: *mut Fl_Simple_Terminal,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_draw_data(
        self_: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_handle_data(
        self_: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_draw_data(
        self_: *mut Fl_Simple_Terminal,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_handle_data(
        self_: *mut Fl_Simple_Terminal,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_damage(self_: *const Fl_Simple_Terminal) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_damage(
        self_: *mut Fl_Simple_Terminal,
        flag: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_clear_damage(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_as_window(
        self_: *mut Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_as_group(
        self_: *mut Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_deimage(
        arg1: *mut Fl_Simple_Terminal,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_deimage(
        arg1: *const Fl_Simple_Terminal,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_init(arg1: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_get_buffer(arg1: *mut Fl_Simple_Terminal) -> *mut Fl_Text_Buffer;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_buffer(arg1: *mut Fl_Simple_Terminal, arg2: *mut Fl_Text_Buffer);
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_stay_at_bottom(
        self_: *mut Fl_Simple_Terminal,
        arg1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_stay_at_bottom(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_history_lines(
        self_: *mut Fl_Simple_Terminal,
        arg1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_history_lines(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_ansi(self_: *mut Fl_Simple_Terminal, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Fl_Simple_Terminal_ansi(self_: *const Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_append(
        self_: *mut Fl_Simple_Terminal,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_text(
        self_: *mut Fl_Simple_Terminal,
        s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_text(
        self_: *const Fl_Simple_Terminal,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Fl_Simple_Terminal_clear(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_remove_lines(
        self_: *mut Fl_Simple_Terminal,
        start: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_text_font(arg1: *const Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_text_font(
        arg1: *mut Fl_Simple_Terminal,
        s: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_text_size(arg1: *const Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_text_size(
        arg1: *mut Fl_Simple_Terminal,
        s: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_text_color(arg1: *const Fl_Simple_Terminal)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_text_color(
        arg1: *mut Fl_Simple_Terminal,
        n: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_scroll(
        arg1: *mut Fl_Simple_Terminal,
        topLineNum: ::std::os::raw::c_int,
        horizOffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_insert(
        arg1: *mut Fl_Simple_Terminal,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_insert_position(
        arg1: *mut Fl_Simple_Terminal,
        newPos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_insert_position(
        arg1: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_position_to_xy(
        self_: *const Fl_Simple_Terminal,
        pos: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_count_lines(
        arg1: *const Fl_Simple_Terminal,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        start_pos_is_line_start: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_move_right(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_move_left(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_move_up(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_move_down(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_show_cursor(
        arg1: *mut Fl_Simple_Terminal,
        boolean: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_style_table_entry(
        self_: *mut Fl_Simple_Terminal,
        sbuf: *mut ::std::os::raw::c_void,
        color: *mut ::std::os::raw::c_uint,
        font: *mut ::std::os::raw::c_int,
        fontsz: *mut ::std::os::raw::c_int,
        sz: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_cursor_style(
        arg1: *mut Fl_Simple_Terminal,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_cursor_color(
        arg1: *mut Fl_Simple_Terminal,
        color: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_scrollbar_width(
        arg1: *mut Fl_Simple_Terminal,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_scrollbar_size(
        arg1: *mut Fl_Simple_Terminal,
        newSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_scrollbar_align(
        arg1: *mut Fl_Simple_Terminal,
        align: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_cursor_style(arg1: *mut Fl_Simple_Terminal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_cursor_color(arg1: *mut Fl_Simple_Terminal)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_scrollbar_width(
        arg1: *mut Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_scrollbar_size(
        arg1: *mut Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_scrollbar_align(
        arg1: *mut Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_line_start(
        self_: *const Fl_Simple_Terminal,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_line_end(
        self_: *const Fl_Simple_Terminal,
        startPos: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_skip_lines(
        self_: *mut Fl_Simple_Terminal,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
        startPosIsLineStart: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_rewind_lines(
        self_: *mut Fl_Simple_Terminal,
        startPos: ::std::os::raw::c_int,
        nLines: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_next_word(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_previous_word(self_: *mut Fl_Simple_Terminal);
}
extern "C" {
    pub fn Fl_Simple_Terminal_word_start(
        self_: *const Fl_Simple_Terminal,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_word_end(
        self_: *const Fl_Simple_Terminal,
        pos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_x_to_col(self_: *const Fl_Simple_Terminal, x: f64) -> f64;
}
extern "C" {
    pub fn Fl_Simple_Terminal_col_to_x(self_: *const Fl_Simple_Terminal, col: f64) -> f64;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_width(
        self_: *mut Fl_Simple_Terminal,
        width: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_width(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_font(
        self_: *mut Fl_Simple_Terminal,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_font(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_size(
        self_: *mut Fl_Simple_Terminal,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_size(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_fgcolor(
        self_: *mut Fl_Simple_Terminal,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_fgcolor(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_bgcolor(
        self_: *mut Fl_Simple_Terminal,
        val: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_bgcolor(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Fl_Simple_Terminal_set_linenumber_align(
        self_: *mut Fl_Simple_Terminal,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Fl_Simple_Terminal_linenumber_align(
        self_: *const Fl_Simple_Terminal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_Simple_Terminal_in_selection(
        self_: *const Fl_Simple_Terminal,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Fl_delete_stable(arg1: *mut ::std::os::raw::c_void);
}
